#!/usr/bin/env node
import { Command } from "commander";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import chalk from "chalk";
import ora from "ora";

dotenv.config();

const program = new Command();

// Simple mock of generated app files
function generateNextJsApp(tenantId, tenantName) {
  return [
    {
      path: "package.json",
      content: JSON.stringify(
        {
          name: `${tenantId}-app`,
          version: "1.0.0",
          scripts: {
            dev: "next dev",
            build: "next build",
            start: "next start",
          },
          dependencies: {
            next: "14.0.4",
            react: "^18.2.0",
            "react-dom": "^18.2.0",
          },
        },
        null,
        2
      ),
    },
    {
      path: "next.config.js",
      content: `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig
`,
    },
    {
      path: "pages/_app.js",
      content: `export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />
}
`,
    },
    {
      path: "pages/index.js",
      content: `export default function Home() {
  return (
    <div style={{ padding: '2rem', fontFamily: 'system-ui' }}>
      <h1>Welcome to ${tenantName}!</h1>
      <p>This app was automatically generated and deployed by AutonomiX.</p>
      <p style={{ color: '#666' }}>Tenant ID: ${tenantId}</p>
    </div>
  )
}
`,
    },
    {
      path: ".gitignore",
      content: `node_modules
.next
out
.env*.local
`,
    },
    {
      path: "README.md",
      content: `# ${tenantName} Application

Auto-generated by AutonomiX

## Tenant Information
- **ID**: ${tenantId}
- **Generated**: ${new Date().toISOString()}

## Development

\`\`\`bash
npm install
npm run dev
\`\`\`

## Deployment

This app is automatically deployed to Vercel.
`,
    },
  ];
}

program
  .name("generate-app")
  .description("Generate application code for a tenant")
  .argument("<tenant-id>", "Tenant identifier")
  .option("-p, --prompt <prompt>", "Custom prompt for generation", "Create a simple Next.js app")
  .action(async (tenantId, options) => {
    console.log(chalk.blue("⚙️  Generating application for: ") + chalk.bold(tenantId));
    console.log(chalk.gray("═══════════════════════════════════════════\n"));

    const tmpDir = path.join(process.cwd(), "tmp");
    const tenantFile = path.join(tmpDir, `${tenantId}.json`);

    // Load tenant metadata
    if (!fs.existsSync(tenantFile)) {
      console.error(chalk.red("❌ Tenant not found. Run create-tenant first."));
      process.exit(1);
    }

    const tenant = JSON.parse(fs.readFileSync(tenantFile, "utf8"));
    
    const spinner = ora("Generating application code...").start();

    // Simulate LLM processing time
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Generate files (in real scenario, this would call backend API)
    const files = generateNextJsApp(tenantId, tenant.name);

    spinner.succeed("Application code generated");
    console.log(chalk.green("✓") + ` Generated ${files.length} files`);

    // Save generated files to tmp
    const filesDir = path.join(tmpDir, `${tenantId}-files`);
    if (!fs.existsSync(filesDir)) {
      fs.mkdirSync(filesDir, { recursive: true });
    }

    for (const file of files) {
      const filePath = path.join(filesDir, file.path);
      const fileDir = path.dirname(filePath);
      
      if (!fs.existsSync(fileDir)) {
        fs.mkdirSync(fileDir, { recursive: true });
      }
      
      fs.writeFileSync(filePath, file.content);
      console.log(chalk.gray(`  - ${file.path}`));
    }

    // Update tenant metadata
    tenant.files = files;
    tenant.status = "generated";
    fs.writeFileSync(tenantFile, JSON.stringify(tenant, null, 2));

    console.log(chalk.gray("\n═══════════════════════════════════════════"));
    console.log(chalk.green("✅ Application generated successfully!\n"));
    console.log(chalk.gray(`Files saved to: ${filesDir}`));
  });

program.parse();
