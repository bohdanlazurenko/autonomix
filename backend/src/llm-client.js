const axios = require('axios');

class LLMClient {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseURL = 'https://api.z.ai/api/coding/paas/v4';
    this.model = 'glm-4.6';
  }

  async generateCode(systemPrompt, userPrompt, options = {}) {
    try {
      console.log('[LLM] Generating code with Z.AI API...');
      console.log('[LLM] Model:', this.model);
      console.log('[LLM] User prompt length:', userPrompt.length);

      const response = await axios.post(
        `${this.baseURL}/chat/completions`,
        {
          model: this.model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: options.temperature || 0.7,
          max_tokens: options.maxTokens || 4000,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
          timeout: 60000, // 60 seconds
        }
      );

      const content = response.data.choices[0].message.content;
      console.log('[LLM] ✅ Code generated successfully');
      console.log('[LLM] Response length:', content.length);
      
      return content;
    } catch (error) {
      console.error('[LLM] ❌ Error generating code:', error.message);
      if (error.response) {
        console.error('[LLM] Status:', error.response.status);
        console.error('[LLM] Data:', JSON.stringify(error.response.data, null, 2));
      }
      throw error;
    }
  }

  async generateNextJsApp(prompt) {
    const systemPrompt = `You are an expert Next.js developer. Generate a complete, production-ready Next.js application based on the user's requirements.

CRITICAL RULES:
1. Generate ONLY the page.jsx file content - nothing else
2. Use Next.js 14+ App Router syntax (not Pages Router)
3. Use React 18+ with modern hooks
4. Include inline styles (CSS-in-JS) for beautiful, modern design
5. Make it fully responsive and mobile-friendly
6. Add proper accessibility (ARIA labels, semantic HTML)
7. Use modern gradients, shadows, and animations
8. Return ONLY valid JSX code - no explanations, no markdown, no code fences

The code should be:
- Self-contained and complete
- Ready to deploy
- Visually appealing
- Functionally complete for the requirements
- Using modern React patterns (hooks, functional components)

Return ONLY the content of page.jsx file starting with "export default function" or imports.`;

    const userPrompt = `Create a Next.js application for: ${prompt}

Requirements:
- Modern, beautiful design with gradients and shadows
- Fully responsive layout
- Interactive elements where appropriate
- Proper sections (hero, features, content, contact/CTA)
- Use inline styles or CSS-in-JS
- Include all necessary React imports
- Make it production-ready

Generate the complete page.jsx file content.`;

    try {
      const code = await this.generateCode(systemPrompt, userPrompt);
      
      // Parse the generated code
      return this.parseGeneratedCode(code, prompt);
    } catch (error) {
      console.error('[LLM] Failed to generate with LLM, using fallback template');
      throw error; // Will trigger fallback in routes/tasks.js
    }
  }

  parseGeneratedCode(code, prompt) {
    // Remove markdown code fences if present
    let cleanCode = code.replace(/```jsx?\n?/g, '').replace(/```\n?/g, '');
    
    // Extract business name from prompt
    const businessName = this.extractBusinessName(prompt);
    
    // Ensure code has proper structure
    if (!cleanCode.includes('export default')) {
      throw new Error('Generated code missing export default');
    }

    // Return files for deployment
    return {
      'app/page.jsx': cleanCode,
      'app/layout.jsx': this.generateLayout(businessName),
      'package.json': this.generatePackageJson(businessName),
      '.gitignore': 'node_modules/\n.next/\n.env*.local\nout/\nbuild/',
      'next.config.js': 'module.exports = { reactStrictMode: true }'
    };
  }

  generateLayout(businessName) {
    return `export const metadata = {
  title: '${businessName}',
  description: 'Generated by AutonomiX',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body style={{ margin: 0, padding: 0, fontFamily: 'system-ui, -apple-system, sans-serif' }}>
        {children}
      </body>
    </html>
  );
}`;
  }

  generatePackageJson(businessName) {
    return JSON.stringify({
      name: businessName.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      private: true,
      scripts: {
        dev: 'next dev',
        build: 'next build',
        start: 'next start'
      },
      dependencies: {
        next: '^14.0.4',
        react: '^18.2.0',
        'react-dom': '^18.2.0'
      }
    }, null, 2);
  }

  extractBusinessName(prompt) {
    // Try to extract a business name from the prompt
    const words = prompt.split(' ');
    
    // Look for capitalized words or quoted phrases
    for (let i = 0; i < words.length; i++) {
      if (words[i].match(/^[A-Z][a-z]+$/)) {
        return words[i];
      }
    }
    
    // Default to first 2-3 words
    return words.slice(0, 2).join(' ');
  }
}

module.exports = LLMClient;
